# -*- coding: utf-8 -*-
"""RAG _IMPLEMENTATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ALCSjhcOkXlSyzSYDlClzwkkW9Ud_xtV
"""

!pip install tqdm

from google.colab import drive
drive.mount('/content/drive')

!pip install pypdf

!pip install -q einops accelerate langchain bitsandbytes

!pip install install sentence_transformers

!pip install llama_index
!pip install llama-index-llms-huggingface









from llama_index.core import VectorStoreIndex,SimpleDirectoryReader,ServiceContext,PromptTemplate
from llama_index.llms.huggingface import HuggingFaceLLM
from llama_index.core.prompts.prompts import SimpleInputPrompt

documents = SimpleDirectoryReader(input_files=["/content/drive/MyDrive/Project/City.csv"]).load_data()

new_documents = SimpleDirectoryReader(input_files=["/content/drive/MyDrive/Project/Places.csv"]).load_data()

# Combine the documents
all_documents = documents + new_documents





system_prompt="""
You are a Q&A assistant. Your goal is to answer questions as
accurately as possible based on the instructions and context provided.
"""
## Default format supportable by LLama2
query_wrapper_prompt=SimpleInputPrompt("<|USER|>{query_str}<|ASSISTANT|>")

!huggingface-cli login

!pip install bitsandbytes
!pip install git+https://github.com/huggingface/accelerate.git

import torch

llm = HuggingFaceLLM(
    context_window=4096,
    max_new_tokens=256,
    generate_kwargs={"temperature": 0.0, "do_sample": False},
    system_prompt=system_prompt,
    query_wrapper_prompt=query_wrapper_prompt,
    tokenizer_name="meta-llama/Llama-2-7b-chat-hf",
    model_name="meta-llama/Llama-2-7b-chat-hf",
    device_map="auto",
    # uncomment this if using CUDA to reduce memory usage
    model_kwargs={"torch_dtype": torch.float16 , "load_in_8bit":True}
)







!pip install langchain_community

from langchain.embeddings.huggingface import HuggingFaceEmbeddings
from llama_index.core.service_context import ServiceContext
from llama_index.legacy.embeddings.langchain import LangchainEmbedding

embed_model=LangchainEmbedding(
    HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2"))

service_context=ServiceContext.from_defaults(
    chunk_size=1024,
    llm=llm,
    embed_model=embed_model
)

index=VectorStoreIndex.from_documents(all_documents,service_context=service_context)

query_engine=index.as_query_engine()

response=query_engine.query("What is the best time to visit Manali?")

print(response)

response=query_engine.query("Tell us about goa?")

print(response)

response=query_engine.query("Describe about Goa 50 words?")
print(response)

response = query_engine.query("What is the best time to manali and what are the best  places to visit in manali in 100 words shortly?")
print(response)

import pandas as pd
# Load original dataset
documents = SimpleDirectoryReader(input_files=["/content/drive/MyDrive/Project/City.csv"]).load_data()

new_documents = SimpleDirectoryReader(input_files=["/content/drive/MyDrive/Project/Places.csv"]).load_data()

# Combine the documents
all_documents = documents + new_documents


# Convert documents to a DataFrame
data = []
for doc in all_documents:
    row = {"text": doc.text}
    if hasattr(doc, 'metadata'):
        row.update(doc.metadata)
    data.append(row)

df = pd.DataFrame(data)

# Display the DataFrame
print(df)

df

